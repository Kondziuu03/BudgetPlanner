@model BudgetPlanner.Core.ViewModels.TasksViewModel

@{
    ViewData["Title"] = Model.Heading;
}

@if (Model.Budget == null)
{
    <div class="mt-5">
        @await Html.PartialAsync("~/Views/Budget/_Budget.cshtml", Model.Budget)
    </div>
}
else
{
    <div class="row mb-5 mt-3">
        <div class="col-lg-6">
            @await Html.PartialAsync("~/Views/Budget/_BudgetTable.cshtml", Model.Budget)
        </div>
        <div class="col-6">
            <form id="changeBudget">
                <div class="input-group">
                    <input type="text" id="changeBudgetInput" class="from-control" placeholder="0.00 zł" />
                    <button class="btn btn-outline-secondary" onclick="addToBudget()">Dodaj</button>
                    <button class="btn btn-outline-secondary" onclick="removeFromBudget()">Odejmij</button>
                </div>
            </form>
        </div>
    </div>

    <form id="filterForm">
        <div class="form-row align-items-center">
            <div class="col-auto">
                @Html.TextBoxFor(x => x.FilterTasks.Name,
                 new { @class = "form-control mb-2", placeholder = "Nazwa" })
            </div>
            <div class="col-auto">
                @Html.TextBoxFor(x => x.FilterTasks.MinValue,
                 new { @class = "form-control mb-2", placeholder = "Min. całkowita wartość" })
            </div>
            <div class="col-auto">
                @Html.TextBoxFor(x => x.FilterTasks.MaxValue,
                 new { @class = "form-control mb-2", placeholder = "Max. całkowita wartość" })
            </div>
            <div class="col-auto">
                <div class="form-check">
                    @Html.CheckBoxFor(x => x.FilterTasks.isExecuted, new { @class = "form-check-label mb-2" })
                    @Html.LabelFor(x => x.FilterTasks.isExecuted)
                </div>
            </div>
            <div class="col-auto">
                <button type="submit" class="btn btn-primary" mb-2>Szukaj</button>
            </div>
        </div>
    </form>

    <div class="mt-5">
        <button class="btn btn-success btn-lg" onclick="location.href = '@Url.Action("Task", "Task")'">Dodaj zadanie</button>
    </div>

    <div class="mt-5">
        @await Html.PartialAsync("_TasksTable.cshtml", Model.Tasks)
    </div>
}


@section Scripts
{
    <script type="text/javascript">

        $(document).ready(function () {

            $('#filterForm').submit(function () {

                $.ajax({
                    type: "POST",
                    url: "@Url.Action("Tasks","Task")",
                    data: $(this).serialize(),
                    success: function (data) {
                        $('#tasksTable').html(data);
                    },
                    error: function (data) {
                        alert(data.message);
                    },
                    dataType: "html"
                });
                return false;
            });
        });

        function deleteTask(id, btn) {
            if (!confirm("Czy na pewno chcesz usunać to zadanie?"))
                return;

            $.ajax({
                type: "POST",
                url: "@Url.Action("Delete","Task")",
                data: {
                    id: id
                },
                success: function (data) {
                    if (data.success) {
                        var row = btn.parentNode.parentNode;
                        row.parentNode.removeChild(row);
                    }
                    else {
                        alert(data.message);
                    }
                },
                error: function (data) {
                        alert(data.message);
                },
                dataType: "json"
            });
        }


        function finishTask(id, btn) {

            if (!confirm("Czy na pewno chcesz oznaczyć to zadanie jako zrealizowane?"))
                return;

            $.ajax({
                type: "POST",
                url: "@Url.Action("Finish","Task")",
                data: {
                    id: id
                },
                success: function (data) {
                    if (data.success) {
                        var row = btn.parentNode.parentNode;
                        row.parentNode.removeChild(row);
                        window.location.reload()
                    }
                    else {
                        alert(data.message);
                    }
                },
                error: function (data) {
                        alert(data.message);
                },
                dataType: "json"
            });
        }

        function addToBudget() {
            var val = document.getElementById('changeBudgetInput').value;
            $.ajax({
                type: "POST",
                url: "@Url.Action("AddToBudget","Budget")",
                data: {
                    val: val
                },
                success: function (data) {
                    if (data.success) {
                        window.location.reload()
                    }
                    else {
                        alert(data.message);
                    }
                },
                error: function (data) {
                    alert(data.message);
                },
                dataType: "json"
            });
        }

        function removeFromBudget() {
            var val = document.getElementById('changeBudgetInput').value;
            $.ajax({
                type: "POST",
                url: "@Url.Action("RemoveFromBudget","Budget")",
                data: {
                    val: val
                },
                success: function (data) {
                    if (data.success) {
                        window.location.reload()
                    }
                    else {
                        alert(data.message);
                    }
                },
                error: function (data) {
                    alert(data.message);
                },
                dataType: "json"
            });
        }


    </script>
}